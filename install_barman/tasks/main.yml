---
# tasks file for install_barman
# Installing the necessary packages to work with postgres and users
  - name: install base tools
    dnf:
      name:
        - python3-pexpect.noarch
        - python3-psycopg2
        - bash-completion 
        - wget 
      state: present
      update_cache: true

  # Disable firewalld and remove it from startup
  - name: disable firewalld service
    service:
      name: firewalld
      state: stopped
      enabled: false
    when: (ansible_hostname == "barman")

   # Disable SElinux
  - name: Disable SELinux
    selinux:
      state: disabled
    when: (ansible_hostname == "barman")

  - name: Ensure SELinux is set to disable mode
    lineinfile:
      path: /etc/selinux/config
      regexp: '^SELINUX='
      line: SELINUX=disabled
    when: (ansible_hostname == "barman")

  - name: install repo
    shell: dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    when: (ansible_hostname == "barman")
    
  - name: disable old postgresql module
    shell: dnf -qy module disable postgresql
    when: (ansible_hostname == "barman")

  - name: install epel-release
    shell: dnf install -y epel-release
    when: (ansible_hostname == "barman")
    
  - name: install barman barman-cli postgresql16
    shell: dnf install -y barman barman-cli postgresql16
    when: (ansible_hostname == "barman")

 #  Install barman-cli on node1, node2 
  - name: install barman-cli on nodes
    dnf:
      name:
        - barman-cli
      state: present
      update_cache: true
    when: (ansible_hostname != "barman")

#  Generating an SSH key for the postgres user on the host node1
  - name: generate SSH key for postgres
    user:
      name: postgres
      generate_ssh_key: yes
      ssh_key_type: rsa
      ssh_key_bits: 4096
      force: no
    when: (ansible_hostname == "node1")
 
#  Generating an SSH key for the user barman on the host barman
  - name: generate SSH key for barman
    user:
      name: barman
#      uid: 994
      shell: /bin/bash
      generate_ssh_key: yes
      ssh_key_type: rsa
      ssh_key_bits: 4096
      force: no
    when: (ansible_hostname == "barman")

  #  We take the contents of the postgres public key from the host node1
  - name: fetch all public ssh keys node1
    shell: cat /var/lib/pgsql/.ssh/id_rsa.pub
    register: ssh_keys
    when: (ansible_hostname == "node1")

  #  Copy the key from barman to node1
  - name: transfer public key to node1
    delegate_to: barman
    authorized_key:
      key: "{{ ssh_keys.stdout }}"
      comment: "{{ansible_hostname}}"
      user: barman
    when: (ansible_hostname == "node1")

  #  We take the contents of the barman public key from the host barman 
  - name: fetch all public ssh keys barman
    shell: cat /var/lib/barman/.ssh/id_rsa.pub
    register: ssh_keys
    when: (ansible_hostname == "barman")

 #  copy the key from node1 to barman
  - name: transfer public key to barman
    delegate_to: node1
    authorized_key:
      key: "{{ ssh_keys.stdout }}"
      comment: "{{ansible_hostname}}"
      user: postgres
    when: (ansible_hostname == "barman")

  #CREATE USER barman SUPERUSER;
  - name: Create barman user
    become_user: postgres
    postgresql_user:
      name: barman
      password: '{{ barman_user_password }}'
      role_attr_flags: SUPERUSER 
    ignore_errors: true
    when: (ansible_hostname == "node1")

   # Adding permissions to connect from the host barman
  - name: Add permission for barman
    lineinfile:
      path: /var/lib/pgsql/16/data/pg_hba.conf
      line: 'host    all   {{ barman_user }}    {{ barman_ip }}/32    scram-sha-256'
    when: (ansible_hostname == "node1") or
          (ansible_hostname == "node2") 

  # Adding permissions to connect from the host barman
  - name: Add permission for barman
    lineinfile:
      path: /var/lib/pgsql/16/data/pg_hba.conf
      line: 'host    replication   {{ barman_user }}    {{ barman_ip }}/32    scram-sha-256'
    when: (ansible_hostname == "node1") or
          (ansible_hostname == "node2") 

  # restart postgresql-server
  - name: restart postgresql-server on node1
    shell: systemctl restart postgresql-16
#    service: 
#      name: postgresql-16
#      state: restarted
    when: (ansible_hostname == "node1")

  # create DB otus;
  - name: Create DB for backup
    become_user: postgres
    postgresql_db:
      name: otus
      encoding: UTF-8
      template: template0
      state: present
    when: (ansible_hostname == "node1")

  # Create table test1 in the otus database;
  - name: Add tables to otus_backup
    become_user: postgres
    postgresql_table:
      db: otus
      name: test1
      state: present
    when: (ansible_hostname == "node1")

  # copy file .pgpass
  - name: copy .pgpass
    template:
      src: .pgpass.j2
      dest: /var/lib/barman/.pgpass
      owner: barman
      group: barman
      mode: '0600'
    when: (ansible_hostname == "barman")

  # copy file barman.conf
  - name: copy barman.conf
    template:
      src: barman.conf.j2
      dest: /etc/barman.conf 
      owner: barman
      group: barman
      mode: '0755'
    when: (ansible_hostname == "barman")

  - name: Create a directory 
    ansible.builtin.file:
      path: /etc/barman.d
      state: directory
      mode: '0755'
      owner: barman
      group: barman
    when: (ansible_hostname == "barman")
 # copy file node1.conf
  - name: copy node1.conf
    template:
      src: node1.conf.j2
      dest: /etc/barman.d/node1.conf
      owner: barman
      group: barman
      mode: '0755'
    when: (ansible_hostname == "barman")

  - name: barman switch-wal node1
    become_user: barman
    shell: barman switch-wal node1
    when: (ansible_hostname == "barman")

  - name: barman cron
    become_user: barman
    shell: barman cron
    when: (ansible_hostname == "barman")
